import streamlit as st
import openai
import json

# Set OpenAI API key
openai.api_key = st.secrets["OPENAI_API_KEY"]


css_styles = """
h1 {
    color: purple;
    font-size: 24px;
    text-align: center;
    font-weight: bold;
}
h2 {
    color: blue;
    font-size: 24px;
    text-align: center;
    font-weight: bold;
}
h3 {
    color: green;
    font-size: 24px;
    text-align: center;
    font-weight: bold;
}
.wrong-code {
    color: red;
    font-size: 18px;
    text-align: center;
    font-weight: bold;
}
.corrected-code {
    color: blue;
    text-align: center;
    font-size: 18px;
    font-weight: bold;
}
"""
created_style = """
    color: #888888; /* Light gray color */
    font-size: 99px; /* Increased font size */
"""
header_style = """
    text-align: center;
    color: white;
    background-color: #800080;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 30px;
"""

st.cache_data(show_spinner=False)
def get_solution(code, error, language):
    system_prompt = """You are a assitant which helps to fix coding errors in the code. You will be given with the erronous code and the error which user is getting in running this code. You will help the user fix the errors in the code. What you have to do is to analyze the code and error step by step and figure out what is causing the error and then try to resolve it step by step.
    The output format should follow the follow the following rules:
First You will provide the explanation of the error that what the error is saying. Second you will provide the theretical explanation of the potential solution to fix that error. Third you will be providing the corrected_code. Fourth and last you will explain your provided corrected code line by line and word by word. Don't hesitate to give long long explanations and long responses. Your response should strictly follow the following json format. There should not be any changes in it:
    '{"error_explantion": "The error is about an syntax error in your code...","theoretical_solution_explanation": "You can fix this error by replacing Openai with OpenAI",
     "corrected_code": "from openai import OpenAI",
     "corrected_code_explanation":"1_ from openai import OpenAI: In this line we are importing OpenAI class from the openai library. This class has several methods to call open ai API's in our applications."}'
     Your response should strictly follow the above json format. There should not be any changes in this.
"""
    user_prompt = f"""Here is the {language} code:\n
      {code}\n
      which is generating the following error:\n
      {error}
    """
    messages = [
        {'role': 'user', 'content': user_prompt},
        {'role': 'system', 'content':system_prompt}
    ]
    client = openai.OpenAI()
    response = client.chat.completions.create(
        model ="gpt-3.5-turbo",
        messages=messages,
        temperature=0.5,
        max_tokens=1000,
        top_p=1.0,
        frequency_penalty=0.0,
        presence_penalty=0.0
    )
    return response

def main():

    st.set_page_config(page_title="Coding Error Solver", page_icon="üõ†Ô∏è")
    st.markdown("<p style='{}'>‚û°Ô∏ècreated by 'Muhammad Zain Attiq'</p>".format(created_style), unsafe_allow_html=True)
    st.markdown(f"<h1 style='{header_style}'>Coding Error Solver</h1>", unsafe_allow_html=True)
    with st.expander("About Coding Error Solution App"):
        st.success("What can this app do?")
        st.write("""
        The Coding Error Solution App is designed to help developers troubleshoot and fix coding errors efficiently. It provides detailed explanations of error messages, suggests theoretical solutions, and offers corrected code snippets to address the identified issues. With support for various programming languages, the app streamlines the debugging process, saving time and effort for developers.
        """)

        # How to use this app?
        st.info("How to use this app?")
        st.write("""
        1. **Enter Code:** Input your code snippet into the designated text area.
        2. **Provide Error Message:** Enter the error message generated by your code execution.
        3. **Select Language:** Choose the programming language used in your code.
        4. **Get Solution:** Click the "Get Solution" button to receive explanations and solutions tailored to your coding error.
        
        Experience the convenience and effectiveness of the Coding Error Solution App for resolving coding errors with ease!
        """)
    # Text area for entering code
    code = st.text_area("Enter your code:")

    # Text area for entering error
    error = st.text_area("Enter the error message:")

    # Radio button to select programming language
    language = st.radio("Select programming language:", (
    "Python",
    "JavaScript",
    "Java",
    "C#",
    "C++",
    "TypeScript",
    "PHP",
    "SQL",
    "Swift",
    "Kotlin"
), horizontal = True)

    if st.button("Get Solution"):
        if code.strip() == "":
            st.error("Please enter the code.")
        elif error.strip() == "":
            st.error("Please enter the error message.")
        else:
            st.markdown(f'<style>{css_styles}</style>', unsafe_allow_html=True)

            
            response = get_solution(code, error, language)
            response = response.choices[0].message.content
            json_response = json.loads(response)
            st.success("Solution:")
            st.markdown("#  Explanation:")
            container1 = st.container(border=True)
            container1.write(json_response["error_explanation"])
            st.markdown("## Solution:")
            container2 = st.container(border=True)
            container2.write(json_response["theoretical_solution_explanation"])
            container2.code(json_response["corrected_code"], language = "python")
            st.markdown("### Solution Explanation:")
            container4 = st.container(border=True)
            container4.write(json_response["corrected_code_explanation"])
            
            with st.expander("Compare the code.."):
                st.markdown("## Comparison:")
                col1 , col2 = st.columns(2)
                with col1:
                    st.markdown("**Wrong Code:**", unsafe_allow_html=True)
                    st.code(code)
                with col2:
                    st.markdown("**Corrected Code:**", unsafe_allow_html=True)
                    st.code(json_response["corrected_code"], language = "python")
if __name__ == "__main__":
    main()
